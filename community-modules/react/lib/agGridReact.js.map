{"version":3,"sources":["agGridReact.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+BAA+C;AAC/C,sCAAwC;AACxC,gDAWiC;AACjC,+CAA8C;AAC9C,mDAAkD;AAClD,mEAGkC;AAUlC;IAAiC,+BAA+B;IAkB9D,qBAAmB,KAAU,EAAS,KAAU;QAAhD,YACE,kBAAM,KAAK,EAAE,KAAK,CAAC,SACpB;QAFkB,WAAK,GAAL,KAAK,CAAK;QAAS,WAAK,GAAL,KAAK,CAAK;QAbhD,4BAAsB,GAAG,IAAI,+CAAsB,EAAE,CAAC;QAEtD,SAAG,GAAmB,IAAI,CAAC;QAE3B,aAAO,GAAkB,EAAE,CAAC;QAC5B,4BAAsB,GAAG,KAAK,CAAC;QAE/B,eAAS,GAAG,KAAK,CAAC;;IAQlB,CAAC;IAED,4BAAM,GAAN;QAAA,iBAWC;QAVC,OAAO,KAAK,CAAC,aAAa,CACxB,KAAK,EACL;YACE,KAAK,EAAE,IAAI,CAAC,iBAAiB,EAAE;YAC/B,GAAG,EAAE,UAAC,CAAc;gBAClB,KAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;YACpB,CAAC;SACF,EACD,IAAI,CAAC,OAAO,CACb,CAAC;IACJ,CAAC;IAED,uCAAiB,GAAjB;QACE,IAAM,KAAK,GAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACtC,gCAAgC;QAChC,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;QACjD,IAAI,cAAc,EAAE;YAClB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;gBACtC,KAAK,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,uCAAiB,GAAjB;QACE,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;QACzC,IAAM,UAAU,GAAG;YACjB,qBAAqB,EAAE;gBACrB,WAAW,EAAE,IAAI;gBACjB,yBAAyB,EAAE,IAAI,8BAA8B,CAAC,IAAI,CAAC;aACpE;YACD,OAAO,SAAA;SACR,CAAC;QAEF,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;QAC/C,IAAI,2BAAY,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC5C,WAAW,CAAC,UAAU,GAAG,2BAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtE;QAED,IAAI,CAAC,WAAW,GAAG,oBAAa,CAAC,2BAA2B,CAC1D,WAAW,EACX,IAAI,CAAC,KAAK,CACX,CAAC;QAEF,8BAA8B;QAC9B,IAAI,WAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAEtD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAI,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAU,CAAC;IAC/C,CAAC;IAED,qCAAe,GAAf,UACE,cAA8B,EAC9B,OAA6B,EAC7B,WAAe;QAHjB,iBA2BC;QAxBC,4BAAA,EAAA,eAAe;QAEf,8DAA8D;QAC9D,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO,CAAC,IAAI,CAAC,CAAC;YACd,OAAO;SACR;QAED,IAAI,cAAc,CAAC,QAAQ,EAAE,EAAE;YAC7B,OAAO,CAAC,IAAI,CAAC,CAAC;SACf;aAAM;YACL,IAAI,WAAW,IAAI,WAAW,CAAC,2BAA2B,EAAE;gBAC1D,OAAO,CAAC,KAAK,CACX,+BAA6B,cAAc,CAAC,qBAAqB,EAAE,6BACjE,WAAW,CAAC,2BAA2B,OACrC,CACL,CAAC;gBACF,OAAO;aACR;YACD,MAAM,CAAC,UAAU,CACf,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,cAAc,EAAE,OAAO,EAAE,WAAW,GAAG,CAAC,CAAC,EAA9D,CAA8D,EACpE,CAAC,CACF,CAAC;SACH;IACH,CAAC;IAED;;;;OAIG;IACH,sCAAgB,GAAhB,UACE,MAAmB,EACnB,cAA8B,EAC9B,OAA6B;QAE7B,IAAI,CAAC,OAAO,kBAAO,IAAI,CAAC,OAAO,GAAE,MAAM,EAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IAClE,CAAC;IAED,iCAAW,GAAX,UAAY,QAAc;QAA1B,iBAcC;QAbC,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,OAAO,QAAQ,IAAI,QAAQ,EAAE,CAAC;SAC/B;QACD,UAAU,CAAC;YACT,IAAI,KAAI,CAAC,GAAG,EAAE;gBACZ,aAAa;gBACb,KAAI,CAAC,WAAW,CAAC;oBACf,QAAQ,IAAI,QAAQ,EAAE,CAAC;oBACvB,KAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBACtC,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;IACrC,CAAC;IAED,mCAAa,GAAb,UAAc,MAAmB;QAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,KAAK,MAAM,EAApB,CAAoB,CAAC,CAAC;QACxE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,4CAAsB,GAA9B,UAA+B,OAAe;QAC5C,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,2DAA2D;YAC3D,kEAAkE;YAClE,yEAAyE;YACzE,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,8BAA8B,EAAE;gBAC/C,OAAO,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC;aAClD;iBAAM,IACL,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;gBAC9B,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAC3B;gBACA,OAAO,oDAA2B,CAAC,aAAa,CAAC;aAClD;SACF;QAED,6DAA6D;QAC7D,OAAO,oDAA2B,CAAC,cAAc,CAAC;IACpD,CAAC;IAED,2CAAqB,GAArB,UAAsB,SAAc;QAClC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAEhD,4EAA4E;QAC5E,6EAA6E;QAC7E,oBAAoB;QACpB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,wCAAkB,GAAlB,UAAmB,SAAc;QAC/B,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,yCAAmB,GAAnB,UAAoB,SAAc,EAAE,SAAc;QAChD,IAAM,OAAO,GAAQ,EAAE,CAAC;QAExB,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAC/D,IAAI,CAAC,+BAA+B,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAEzD,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACnC,oBAAa,CAAC,eAAe,CAC3B,OAAO,EACP,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,GAAI,EACT,IAAI,CAAC,SAAS,CACf,CAAC;SACH;IACH,CAAC;IAEO,qDAA+B,GAAvC,UAAwC,SAAc,EAAE,OAAY;QAClE,IAAI,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;QAErC,IAAI,2BAAY,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE;YAC3C,IAAM,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAC/D,oDAA2B,CAAC,cAAc,CAC3C,CAAC;YAEF,IAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;YACnD,IAAM,UAAU,GAAG,2BAAY,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAC9D,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc,EAAE,UAAU,CAAC,EAAE;gBAC3D,IAAI,YAAY,EAAE;oBAChB,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;iBACzD;gBAED,OAAO,CAAC,YAAY,CAAC,GAAG;oBACtB,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;oBAC1C,YAAY,EAAE,2BAAY,CAAC,kBAAkB,CAAC,SAAS,CAAC;iBACzD,CAAC;aACH;SACF;IACH,CAAC;IAEO,gDAA0B,GAAlC,UACE,SAAc,EACd,SAAc,EACd,OAAY;QAHd,iBAyCC;QApCC,IAAI,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;QAErC,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC3C,WAAW,CAAC,OAAO,CAAC,UAAC,OAAO;YAC1B,IAAI,oBAAa,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;gBACxD,IAAM,uBAAuB,GAAG,KAAI,CAAC,sBAAsB,CAAC,WAAW,CACrE,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CACrC,CAAC;gBACF,IACE,CAAC,uBAAuB,CAAC,QAAQ,CAC/B,SAAS,CAAC,OAAO,CAAC,EAClB,SAAS,CAAC,OAAO,CAAC,CACnB,EACD;oBACA,IAAI,YAAY,EAAE;wBAChB,OAAO,CAAC,GAAG,CAAC,mBAAiB,OAAO,uBAAoB,CAAC,CAAC;qBAC3D;oBAED,OAAO,CAAC,OAAO,CAAC,GAAG;wBACjB,aAAa,EAAE,SAAS,CAAC,OAAO,CAAC;wBACjC,YAAY,EAAE,SAAS,CAAC,OAAO,CAAC;qBACjC,CAAC;iBACH;aACF;QACH,CAAC,CAAC,CAAC;QACH,oBAAa,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,UAAC,QAAgB;YACzD,IAAI,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,QAAQ,CAAC,EAAE;gBAChD,IAAI,YAAY,EAAE;oBAChB,OAAO,CAAC,GAAG,CAAC,mBAAiB,QAAQ,6BAA0B,CAAC,CAAC;iBAClE;gBACD,OAAO,CAAC,QAAQ,CAAC,GAAG;oBAClB,aAAa,EAAE,SAAS,CAAC,QAAQ,CAAC;oBAClC,YAAY,EAAE,SAAS,CAAC,QAAQ,CAAC;iBAClC,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,0CAAoB,GAApB;QACE,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YACnB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;SACjB;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAEM,2CAAqB,GAA5B;QACE,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;IAC1C,CAAC;IAtPc,uCAA2B,GAAW,IAAI,CAAC,CAAC,iEAAiE;IAuP9H,kBAAC;CAvQD,AAuQC,CAvQgC,iBAAS,GAuQzC;AAvQY,kCAAW;AAyQxB,WAAW,CAAC,SAAS,GAAG;IACtB,WAAW,EAAE,SAAS,CAAC,MAAM;CAC9B,CAAC;AAEF,aAAa,CAAC,oBAAa,CAAC,iBAAiB,EAAE,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;AACjE,aAAa,CAAC,oBAAa,CAAC,kBAAkB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;AAChE,aAAa,CAAC,oBAAa,CAAC,iBAAiB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AACjE,aAAa,CAAC,oBAAa,CAAC,iBAAiB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AACjE,aAAa,CAAC,oBAAa,CAAC,gBAAgB,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;AAC/D,aAAa,CAAC,oBAAa,CAAC,iBAAiB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AACjE,aAAa,CAAC,oBAAa,CAAC,mBAAmB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;AAEjE,SAAS,aAAa,CAAC,WAAqB,EAAE,QAAa;IACzD,WAAW,CAAC,OAAO,CAAC,UAAC,OAAe;QACjC,WAAmB,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC;AAED;IACU,kDAAuC;IAI/C,wCAAY,WAAwB;QAApC,YACE,iBAAO,SAER;QADC,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;IACjC,CAAC;IAED,sDAAa,GAAb,UACE,kBAAmC,EACnC,aAA4B;QAE5B,OAAO,IAAI,+BAAc,CACvB,kBAAkB,EAClB,IAAI,CAAC,WAAW,EAChB,aAAa,CACd,CAAC;IACJ,CAAC;IACH,qCAAC;AAAD,CApBA,AAoBC,CAnBS,2BAAoB,GAmB7B","file":"agGridReact.js","sourcesContent":["import * as React from 'react';\nimport { Component, ReactPortal } from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  BaseComponentWrapper,\n  ColumnApi,\n  ComponentUtil,\n  ComponentType,\n  FrameworkComponentWrapper,\n  Grid,\n  GridApi,\n  GridOptions,\n  Module,\n  WrapableInterface,\n} from '@ag-grid-community/core';\nimport { AgGridColumn } from './agGridColumn';\nimport { ReactComponent } from './reactComponent';\nimport {\n  ChangeDetectionService,\n  ChangeDetectionStrategyType,\n} from './changeDetectionService';\n\nexport interface AgGridReactProps extends GridOptions {\n  gridOptions?: GridOptions;\n  modules?: Module[];\n  rowDataChangeDetectionStrategy?: ChangeDetectionStrategyType;\n  componentWrappingElement?: string;\n  disableStaticMarkup?: boolean;\n}\n\nexport class AgGridReact extends Component<AgGridReactProps, {}> {\n  static propTypes: any;\n\n  gridOptions!: GridOptions;\n\n  changeDetectionService = new ChangeDetectionService();\n\n  api: GridApi | null = null;\n  columnApi!: ColumnApi;\n  portals: ReactPortal[] = [];\n  hasPendingPortalUpdate = false;\n\n  destroyed = false;\n\n  protected eGridDiv!: HTMLElement;\n\n  private static MAX_COMPONENT_CREATION_TIME: number = 1000; // a second should be more than enough to instantiate a component\n\n  constructor(public props: any, public state: any) {\n    super(props, state);\n  }\n\n  render() {\n    return React.createElement<any>(\n      'div',\n      {\n        style: this.createStyleForDiv(),\n        ref: (e: HTMLElement) => {\n          this.eGridDiv = e;\n        },\n      },\n      this.portals,\n    );\n  }\n\n  createStyleForDiv() {\n    const style: any = { height: '100%' };\n    // allow user to override styles\n    const containerStyle = this.props.containerStyle;\n    if (containerStyle) {\n      Object.keys(containerStyle).forEach((key) => {\n        style[key] = containerStyle[key];\n      });\n    }\n    return style;\n  }\n\n  componentDidMount() {\n    const modules = this.props.modules || [];\n    const gridParams = {\n      providedBeanInstances: {\n        agGridReact: this,\n        frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this),\n      },\n      modules,\n    };\n\n    let gridOptions = this.props.gridOptions || {};\n    if (AgGridColumn.hasChildColumns(this.props)) {\n      gridOptions.columnDefs = AgGridColumn.mapChildColumnDefs(this.props);\n    }\n\n    this.gridOptions = ComponentUtil.copyAttributesToGridOptions(\n      gridOptions,\n      this.props,\n    );\n\n    // don't need the return value\n    new Grid(this.eGridDiv, this.gridOptions, gridParams);\n\n    this.api = this.gridOptions.api!;\n    this.columnApi = this.gridOptions.columnApi!;\n  }\n\n  waitForInstance(\n    reactComponent: ReactComponent,\n    resolve: (value: any) => void,\n    runningTime = 0,\n  ) {\n    // if the grid has been destroyed in the meantime just resolve\n    if (this.destroyed) {\n      resolve(null);\n      return;\n    }\n\n    if (reactComponent.rendered()) {\n      resolve(null);\n    } else {\n      if (runningTime >= AgGridReact.MAX_COMPONENT_CREATION_TIME) {\n        console.error(\n          `ag-Grid: React Component '${reactComponent.getReactComponentName()}' not created within ${\n            AgGridReact.MAX_COMPONENT_CREATION_TIME\n          }ms`,\n        );\n        return;\n      }\n      window.setTimeout(\n        () => this.waitForInstance(reactComponent, resolve, runningTime + 5),\n        5,\n      );\n    }\n  }\n\n  /**\n   * Mounts a react portal for components registered under the componentFramework.\n   * We do this because we want all portals to be in the same tree - in order to get\n   * Context to work properly.\n   */\n  mountReactPortal(\n    portal: ReactPortal,\n    reactComponent: ReactComponent,\n    resolve: (value: any) => void,\n  ) {\n    this.portals = [...this.portals, portal];\n    this.batchUpdate(this.waitForInstance(reactComponent, resolve));\n  }\n\n  batchUpdate(callback?: any) {\n    if (this.hasPendingPortalUpdate) {\n      return callback && callback();\n    }\n    setTimeout(() => {\n      if (this.api) {\n        // destroyed?\n        this.forceUpdate(() => {\n          callback && callback();\n          this.hasPendingPortalUpdate = false;\n        });\n      }\n    });\n    this.hasPendingPortalUpdate = true;\n  }\n\n  destroyPortal(portal: ReactPortal) {\n    this.portals = this.portals.filter((curPortal) => curPortal !== portal);\n    this.batchUpdate();\n  }\n\n  private getStrategyTypeForProp(propKey: string) {\n    if (propKey === 'rowData') {\n      // for row data we either return the supplied strategy, or:\n      // if deltaRowDataMode/immutableData we default to IdentityChecks,\n      // if not we default to DeepValueChecks (with the rest of the properties)\n      if (!!this.props.rowDataChangeDetectionStrategy) {\n        return this.props.rowDataChangeDetectionStrategy;\n      } else if (\n        this.props['deltaRowDataMode'] ||\n        this.props['immutableData']\n      ) {\n        return ChangeDetectionStrategyType.IdentityCheck;\n      }\n    }\n\n    // all non row data properties will default to DeepValueCheck\n    return ChangeDetectionStrategyType.DeepValueCheck;\n  }\n\n  shouldComponentUpdate(nextProps: any) {\n    this.processPropsChanges(this.props, nextProps);\n\n    // we want full control of the dom, as ag-Grid doesn't use React internally,\n    // so for performance reasons we tell React we don't need render called after\n    // property changes.\n    return false;\n  }\n\n  componentDidUpdate(prevProps: any) {\n    this.processPropsChanges(prevProps, this.props);\n  }\n\n  processPropsChanges(prevProps: any, nextProps: any) {\n    const changes = <any>{};\n\n    this.extractGridPropertyChanges(prevProps, nextProps, changes);\n    this.extractDeclarativeColDefChanges(nextProps, changes);\n\n    if (Object.keys(changes).length > 0) {\n      ComponentUtil.processOnChange(\n        changes,\n        this.gridOptions,\n        this.api!,\n        this.columnApi,\n      );\n    }\n  }\n\n  private extractDeclarativeColDefChanges(nextProps: any, changes: any) {\n    let debugLogging = !!nextProps.debug;\n\n    if (AgGridColumn.hasChildColumns(nextProps)) {\n      const detectionStrategy = this.changeDetectionService.getStrategy(\n        ChangeDetectionStrategyType.DeepValueCheck,\n      );\n\n      const currentColDefs = this.gridOptions.columnDefs;\n      const newColDefs = AgGridColumn.mapChildColumnDefs(nextProps);\n      if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n        if (debugLogging) {\n          console.log(`agGridReact: colDefs definitions changed`);\n        }\n\n        changes['columnDefs'] = {\n          previousValue: this.gridOptions.columnDefs,\n          currentValue: AgGridColumn.mapChildColumnDefs(nextProps),\n        };\n      }\n    }\n  }\n\n  private extractGridPropertyChanges(\n    prevProps: any,\n    nextProps: any,\n    changes: any,\n  ) {\n    let debugLogging = !!nextProps.debug;\n\n    const changedKeys = Object.keys(nextProps);\n    changedKeys.forEach((propKey) => {\n      if (ComponentUtil.ALL_PROPERTIES.indexOf(propKey) !== -1) {\n        const changeDetectionStrategy = this.changeDetectionService.getStrategy(\n          this.getStrategyTypeForProp(propKey),\n        );\n        if (\n          !changeDetectionStrategy.areEqual(\n            prevProps[propKey],\n            nextProps[propKey],\n          )\n        ) {\n          if (debugLogging) {\n            console.log(`agGridReact: [${propKey}] property changed`);\n          }\n\n          changes[propKey] = {\n            previousValue: prevProps[propKey],\n            currentValue: nextProps[propKey],\n          };\n        }\n      }\n    });\n    ComponentUtil.getEventCallbacks().forEach((funcName: string) => {\n      if (this.props[funcName] !== nextProps[funcName]) {\n        if (debugLogging) {\n          console.log(`agGridReact: [${funcName}] event callback changed`);\n        }\n        changes[funcName] = {\n          previousValue: prevProps[funcName],\n          currentValue: nextProps[funcName],\n        };\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.api) {\n      this.api.destroy();\n      this.api = null;\n    }\n    this.destroyed = true;\n  }\n\n  public isDisableStaticMarkup(): boolean {\n    return !!this.props.disableStaticMarkup;\n  }\n}\n\nAgGridReact.propTypes = {\n  gridOptions: PropTypes.object,\n};\n\naddProperties(ComponentUtil.getEventCallbacks(), PropTypes.func);\naddProperties(ComponentUtil.BOOLEAN_PROPERTIES, PropTypes.bool);\naddProperties(ComponentUtil.STRING_PROPERTIES, PropTypes.string);\naddProperties(ComponentUtil.OBJECT_PROPERTIES, PropTypes.object);\naddProperties(ComponentUtil.ARRAY_PROPERTIES, PropTypes.array);\naddProperties(ComponentUtil.NUMBER_PROPERTIES, PropTypes.number);\naddProperties(ComponentUtil.FUNCTION_PROPERTIES, PropTypes.func);\n\nfunction addProperties(listOfProps: string[], propType: any) {\n  listOfProps.forEach((propKey: string) => {\n    (AgGridReact as any)[propKey] = propType;\n  });\n}\n\nclass ReactFrameworkComponentWrapper\n  extends BaseComponentWrapper<WrapableInterface>\n  implements FrameworkComponentWrapper {\n  private readonly agGridReact!: AgGridReact;\n\n  constructor(agGridReact: AgGridReact) {\n    super();\n    this.agGridReact = agGridReact;\n  }\n\n  createWrapper(\n    UserReactComponent: { new (): any },\n    componentType: ComponentType,\n  ): WrapableInterface {\n    return new ReactComponent(\n      UserReactComponent,\n      this.agGridReact,\n      componentType,\n    );\n  }\n}\n"]}